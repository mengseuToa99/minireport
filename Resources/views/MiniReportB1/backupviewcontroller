    public function viewFile($id)
    {
        try {
            $business_id = request()->session()->get('user.business_id');

            // Get the file with validation
            $file = MiniReportB1File::where('business_id', $business_id)
                ->where('id', $id)
                ->firstOrFail();

            // Decode the layout JSON
            $layout = json_decode($file->layout, true);

            // Extract components from layout
            $headerRows = $layout['headerRows'] ?? [];
            $rows = $layout['rows'] ?? [];
            $usedFields = $layout['usedFields'] ?? [];
            $dataMapping = $layout['dataMapping'] ?? [];

            // Get filter parameters from the request
            $filters = request()->only(array_keys($this->getDynamicFields($headerRows)));

            // Get pagination parameters from the request
            $page = request()->get('page', 1);
            $perPage = request()->get('per_page', 25); // Default to 25 rows per page

            // Retrieve filtered raw data from the database
            $rawData = $this->salesData->getRawSalesData($usedFields, $filters);

            // Merge raw data with the layout rows
            $allRows = $this->mergeRawDataWithRows($rows, $rawData, $dataMapping);

            // Calculate total pages
            $totalRows = count($allRows);
            $totalPages = ceil($totalRows / $perPage);

            // Slice the rows for the current page
            $startIndex = ($page - 1) * $perPage;
            $rows = array_slice($allRows, $startIndex, $perPage);

            // Get dynamic fields and their possible values for filtering
            $dynamicFields = $this->getDynamicFields($headerRows);
            $fieldOptions = $this->getFieldOptions($allRows, $dynamicFields);

            $business_locations = null;
            return view('minireportb1::MiniReportB1.view', compact(
                'file',
                'headerRows',
                'rows',
                'usedFields',
                'dataMapping',
                'filters',
                'page',
                'perPage',
                'totalPages',
                'totalRows',
                'dynamicFields', // Pass dynamic fields to the view
                'fieldOptions'   // Pass field options to the view
            ));
        } catch (\Exception $e) {
            \Log::error('Error in viewFile method', [
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString()
            ]);

            return redirect()->back()->with('error', 'Error loading file: ' . $e->getMessage());
        }
    }